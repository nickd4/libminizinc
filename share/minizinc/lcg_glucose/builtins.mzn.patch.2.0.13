--- ../std/builtins.mzn	2017-04-13 17:59:35.193364992 +1000
+++ builtins.mzn	2017-04-13 17:59:56.033457445 +1000
@@ -1414,13 +1414,35 @@
     constraint array_var_int_element_nonshifted(idx,x,r) ::defines_var(r);
   } in r;
 
+% Nick 2D version that doesn't flatten index to 1D
+function var int: element_t(var int: idx1, var int: idx2, array[int,int] of var int: x) :: promise_total =
+  let {
+    var dom_bounds_array(x): r ::is_defined_var;
+    constraint idx1 in index_set_1of2(x);
+    constraint idx2 in index_set_2of2(x);
+    constraint array_var_int_element_nonshifted(idx1,idx2,x,r) ::defines_var(r);
+  } in r;
+
 function var int: element_mt(var int: idx, array[int] of var int: x) :: promise_total =
   let {
     var lb_array(x)..ub_array(x): r ::is_defined_var;
-    var min(index_set(x))..max(index_set(x)): idx2;
-    constraint idx in index_set(x) -> idx2=idx;
-    constraint idx in index_set(x) \/ idx2=min(index_set(x));
-    constraint array_var_int_element_nonshifted(idx2,x,r) ::defines_var(r);
+    var min(index_set(x))..max(index_set(x)): idx_prime;
+    constraint idx in index_set(x) -> idx_prime=idx;
+    constraint idx in index_set(x) \/ idx_prime=min(index_set(x));
+    constraint array_var_int_element_nonshifted(idx_prime,x,r) ::defines_var(r);
+  } in r;
+
+% Nick 2D version that doesn't flatten index to 1D
+function var int: element_mt(var int: idx1, var int: idx2, array[int,int] of var int: x) :: promise_total =
+  let {
+    var lb_array(x)..ub_array(x): r ::is_defined_var;
+    var min(index_set_1of2(x))..max(index_set_1of2(x)): idx1_prime;
+    constraint idx1 in index_set_1of2(x) -> idx1_prime=idx1;
+    constraint idx1 in index_set_1of2(x) \/ idx1_prime=min(index_set_1of2(x));
+    var min(index_set_2of2(x))..max(index_set_2of2(x)): idx2_prime;
+    constraint idx2 in index_set_2of2(x) -> idx2_prime=idx2;
+    constraint idx2 in index_set_2of2(x) \/ idx2_prime=min(index_set_2of2(x));
+    constraint array_var_int_element_nonshifted(idx1_prime,idx2_prime,x,r) ::defines_var(r);
   } in r;
 
 function var int: element(var int: idx, array[int] of var int: x) =
@@ -1433,19 +1455,23 @@
 
 function var int: element(var int: idx1, var int: idx2,
                           array[int,int] of var int: x) =
-  let {
-    int: dim = card(index_set_2of2(x));
-    int: min_flat = min(index_set_1of2(x))*dim+min(index_set_2of2(x))-1;
-  } in if mzn_in_root_context(idx1) \/
+  %let {
+  %  int: dim = card(index_set_2of2(x));
+  %  int: min_flat = min(index_set_1of2(x))*dim+min(index_set_2of2(x))-1;
+  %} in
+  if mzn_in_root_context(idx1) \/
        ((has_bounds(idx1) /\ lb(idx1) >= min(index_set_1of2(x)) /\ ub(idx1) <= max(index_set_1of2(x)))
         /\ (has_bounds(idx2) /\ lb(idx2) >= min(index_set_2of2(x)) /\ ub(idx2) <= max(index_set_2of2(x))))
        then
-         element_t( (idx1*dim+idx2-min_flat)::domain, array1d(x))
+         % Nick element_t( (idx1*dim+idx2-min_flat)::domain, array1d(x))
+         element_t(idx1,idx2,x)
        else
          let {
            constraint idx1 in index_set_1of2(x);
            constraint idx2 in index_set_2of2(x);
-         } in element_mt( (idx1*dim+idx2-min_flat)::domain, array1d(x))
+         } in
+         % Nick element_mt( (idx1*dim+idx2-min_flat)::domain, array1d(x))
+         element_mt(idx1,idx2,x)
        endif;
 
 function var int: element(var int: idx1, var int: idx2, var int: idx3,
@@ -1690,13 +1716,35 @@
     constraint array_var_bool_element_nonshifted(idx,x,r) ::defines_var(r);
   } in r;
 
+% Nick 2D version that doesn't flatten index to 1D
+function var bool: element_t(var int: idx1, var int: idx2, array[int,int] of var bool: x) :: promise_total =
+  let {
+    var bool: r ::is_defined_var;
+    constraint idx1 in index_set_1of2(x);
+    constraint idx2 in index_set_2of2(x);
+    constraint array_var_bool_element_nonshifted(idx1,idx2,x,r) ::defines_var(r);
+  } in r;
+
 function var bool: element_mt(var int: idx, array[int] of var bool: x) :: promise_total =
   let {
     var bool: r ::is_defined_var;
-    var min(index_set(x))..max(index_set(x)): idx2;
-    constraint idx in index_set(x) -> idx2=idx;
-    constraint idx in index_set(x) \/ idx2=min(index_set(x));
-    constraint array_var_bool_element_nonshifted(idx2,x,r) ::defines_var(r);
+    var min(index_set(x))..max(index_set(x)): idx_prime;
+    constraint idx in index_set(x) -> idx_prime=idx;
+    constraint idx in index_set(x) \/ idx_prime=min(index_set(x));
+    constraint array_var_bool_element_nonshifted(idx_prime,x,r) ::defines_var(r);
+  } in r;
+
+% Nick 2D version that doesn't flatten index to 1D
+function var bool: element_mt(var int: idx1, var int: idx2, array[int,int] of var bool: x) :: promise_total =
+  let {
+    var bool: r ::is_defined_var;
+    var min(index_set_1of2(x))..max(index_set_1of2(x)): idx1_prime;
+    constraint idx1 in index_set_1of2(x) -> idx1_prime=idx1;
+    constraint idx1 in index_set_1of2(x) \/ idx1_prime=min(index_set_1of2(x));
+    var min(index_set_2of2(x))..max(index_set_2of2(x)): idx2_prime;
+    constraint idx2 in index_set_2of2(x) -> idx2_prime=idx2;
+    constraint idx2 in index_set_2of2(x) \/ idx2_prime=min(index_set_2of2(x));
+    constraint array_var_bool_element_nonshifted(idx1_prime,idx2_prime,x,r) ::defines_var(r);
   } in r;
 
 function var bool: element(var int: idx, array[int] of var bool: x) =
@@ -1707,19 +1755,23 @@
 
 function var bool: element(var int: idx1, var int: idx2,
                           array[int,int] of var bool: x) =
-  let {
-    int: dim = card(index_set_2of2(x));
-    int: min_flat = min(index_set_1of2(x))*dim+min(index_set_2of2(x))-1;
-  } in if mzn_in_root_context(idx1) \/ (
+  %let {
+  %  int: dim = card(index_set_2of2(x));
+  %  int: min_flat = min(index_set_1of2(x))*dim+min(index_set_2of2(x))-1;
+  %} in
+  if mzn_in_root_context(idx1) \/ (
           (has_bounds(idx1) /\ lb(idx1) >= min(index_set_1of2(x)) /\ ub(idx1) <= max(index_set_1of2(x)))
        /\ (has_bounds(idx2) /\ lb(idx2) >= min(index_set_2of2(x)) /\ ub(idx2) <= max(index_set_2of2(x))) )
        then
-         element_t( (idx1*dim+idx2-min_flat)::domain, array1d(x))
+         % Nick element_t( (idx1*dim+idx2-min_flat)::domain, array1d(x))
+         element_t(idx1,idx2,x)
        else
          let {
            constraint idx1 in index_set_1of2(x);
            constraint idx2 in index_set_2of2(x);
-         } in element_mt( (idx1*dim+idx2-min_flat)::domain, array1d(x))
+         } in
+         % Nick element_mt( (idx1*dim+idx2-min_flat)::domain, array1d(x))
+         element_mt(idx1,idx2,x)
        endif;
 
 function var bool: element(var int: idx1, var int: idx2, var int: idx3,
